{"version":3,"sources":["containers/Card.js","containers/Cardlist.js","containers/SearchBox.js","containers/Scroll.js","components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","Cardlist","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAWeA,EATF,SAACC,GACN,OACI,sBAAKC,UAAU,uDAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAI,WAC/D,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,YCcPC,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,gCACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,OAHZK,MAJrB,QCKOC,EARG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,qBAAKZ,UAAW,MAAhB,SACA,uBAAOA,UAAW,mCAAmCa,KAAO,SAASC,YAAc,gBAAgBC,SAAUH,OCKtGI,EARD,SAACjB,GACX,OACA,qBAAKkB,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,SAAjE,SACCrB,EAAMsB,YCsCIC,G,wDApCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACTtB,OAAQ,GACRmB,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAElB,OAAQ2B,S,oBAMjD,WAAU,IAAD,OACCC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAC5C,OAAOA,EAAOH,KAAKkC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAErE,OAAiC,IAA7BF,KAAKP,MAAMtB,OAAOiC,OACX,yCAGH,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWY,aAAcwB,KAAKb,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUhB,OAAQ4B,a,GA9BpBM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAEAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32d25de2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n        return(\r\n            <div className='tc bg-light-green dib br3 pad3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${props.id}?size=200x200`} alt='robots'></img>\r\n            <h2>{props.name}</h2>\r\n            <p>{props.email}</p>\r\n            </div>\r\n        );\r\n    }\r\nexport default Card;\r\n\r\n// You can use both (props) and ({id,name,email}).\r\n\r\n// const Card = ({id,name,email}) =>{\r\n//     return(\r\n//         <div className='tc bg-light-green dib br3 pad3 ma2 grow bw2 shadow-5'>\r\n//         <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'></img>\r\n//         <h1>{name}</h1>\r\n//         <p>{email}</p>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />);\r\n                }\r\n            )\r\n            };\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className= 'pa2'>\r\n        <input className= 'pa3 bg b--green bg-lightest-blue' type = 'search' placeholder = 'Search Robots' onChange={searchChange}/>\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return(\r\n    <div style={{overflow:'scroll', border:'5px solid black', height:'800px'}}>\r\n    {props.children}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Cardlist from '../containers/Cardlist';\r\nimport SearchBox from '../containers/SearchBox';\r\nimport Scroll from '../containers/Scroll'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then((response) => response.json())\r\n            .then((users) => this.setState({ robots: users }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>ROBOFRIENDS</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                    <Cardlist robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        };\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}